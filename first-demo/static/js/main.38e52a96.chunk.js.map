{"version":3,"sources":["MenuList.js","Css3.js","Menu.js","reportWebVitals.js","index.js"],"names":["MenuList","props","delItem","bind","this","type","content","onClick","className","index","Component","defaultProps","Css3","state","isShow","toToggle","setState","Menu","inputValue","list","htmlFor","id","onChange","inputChange","value","addList","ref","ul","ulBox","map","item","console","log","process","axios","get","then","res","data","catch","error","e","target","temp","splice","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAKMA,G,uDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,QAAU,EAAKA,QAAQC,KAAb,gBAFA,E,qDAaf,OACI,8BACI,+BACKC,KAAKH,MAAMI,KADhB,QAEKD,KAAKH,MAAMK,QAGZ,wBAAQC,QAASH,KAAKF,QAASM,UAAU,UAAzC,iC,gCAqBZJ,KAAKH,MAAMC,QAAQE,KAAKH,MAAMQ,W,GA1CfC,cAuDvBV,EAASW,aAAa,CAClBN,KAAK,sBAGML,QCpCAY,E,kDA1BX,WAAYX,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,CACTC,QAAO,GAEX,EAAKC,SAAW,EAAKA,SAASZ,KAAd,gBALD,E,qDAQf,OACI,gCACI,mBAAGK,UAAWJ,KAAKS,MAAMC,OAAS,YAAc,YAAhD,qDACA,wBAAQP,QAASH,KAAKW,SAAtB,uD,iCAQRX,KAAKY,SAAS,CAEVF,QAASV,KAAKS,MAAMC,a,GAtBbJ,a,iBCoIJO,E,kDA9HX,WAAYhB,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,CACTK,WAAY,GACZC,KAAM,CAAC,2BAAQ,4BACfL,QAAQ,GALG,E,qDAQT,IAAD,OACL,OAEI,aADA,CACA,gBACI,sBAAKN,UAAU,MAAf,UACI,qBAAKA,UAAU,QAAf,kDAGA,sBAAKA,UAAU,cAAf,UACI,sBAAKA,UAAU,WAAf,UACI,uBAAOY,QAAQ,MAAf,gCAEA,uBACIC,GAAG,MACHb,UAAU,MACVc,SAAUlB,KAAKmB,YAAYpB,KAAKC,MAChCoB,MAAOpB,KAAKS,MAAMK,gBAG1B,uBACA,gCACI,wBAAQX,QAASH,KAAKqB,QAAQtB,KAAKC,MAAOI,UAAU,MAApD,iBADJ,kDAOJ,sBAAKA,UAAU,cAAf,UACI,mDACA,wHAGJ,oBAAIA,UAAU,mBAAmBkB,IAAK,SAAAC,GAAE,OAAI,EAAKC,MAAQD,GAAzD,SAEQvB,KAAKS,MAAMM,KAAKU,KAAI,SAACC,EAAMrB,GAGvB,OACI,cAAC,EAAD,CAGIA,MAAOA,EACPH,QAASwB,EACT5B,QAAS,EAAKA,QAAQC,KAAK,IAHtBM,EAAQqB,QAgBjC,qBAAKtB,UAAU,cAAf,SACI,cAAC,EAAD,a,0CAOC,IAAD,OAChBuB,QAAQC,IAAI,cAAcC,oIAC1BC,IAAMC,IAAI,6EACLC,MAAK,SAACC,GAEH,EAAKrB,SAAS,CACVG,KAAMkB,EAAIC,KAAKA,UAGtBC,OAAM,SAACC,S,kCAMJC,GAGRrC,KAAKY,SAAS,CACVE,WAAYuB,EAAEC,OAAOlB,U,gCAOzB,IADYpB,KAAKS,MAAMK,WAWnB,OADAa,QAAQC,IAAI,uBACL,EATP5B,KAAKY,SAAS,CACVG,KAAK,GAAD,mBAAMf,KAAKS,MAAMM,MAAjB,CAAuBf,KAAKS,MAAMK,aACtCA,WAAY,KACb,iB,8BAaHT,GAEJ,IAAIkC,EAAOvC,KAAKS,MAAMM,KACtBwB,EAAKC,OAAOnC,EAAO,GACnBL,KAAKY,SAAS,CACVG,KAAMwB,IAEVZ,QAAQC,IAAI,aAAcvB,O,GA3HfC,aCMJmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UAEI,cAAC,EAAD,MAGJC,SAASC,eAAe,SAG1BZ,K","file":"static/js/main.38e52a96.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './style.css'\r\nimport propTypes from 'prop-types' // react 自带的\r\n\r\n\r\nclass MenuList extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.delItem = this.delItem.bind(this)\r\n    }\r\n    // shouldComponentUpdate(nextProps,nextState){\r\n    //     if(nextProps.content !== this.props.content){\r\n    //         return true // 更新为true\r\n    //     }else{\r\n    //         return false\r\n    //     }\r\n    // }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <li>\r\n                    {this.props.type} &nbsp;\r\n                    {this.props.content}\r\n                    {/* <button onClick={this.delItem.bind(this)}>删除</button> */}\r\n                    {/* state中提前绑定this之后这里就不用写了 */}\r\n                    <button onClick={this.delItem} className='del-btn'>删除</button>\r\n                </li>\r\n                {/* {\r\n                        this.state.list.map((item, index) => {\r\n                            // dangerouslySetInnerHTML={{__html:item}} 加在li标签里 可以解析输入的代码\r\n                            return (\r\n                                <li\r\n                                    key={index + item}\r\n                                >\r\n                                    {item}\r\n                                    <button onClick={this.delItem.bind(this, index)}>删除</button>\r\n                                </li>\r\n                            )\r\n                        })\r\n                    } */}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    delItem(){\r\n        // console.log(this.props.index)\r\n        this.props.delItem(this.props.index)\r\n    }\r\n}\r\n\r\n// 在类外面进行props的校验\r\nMenuList.propTypes = {\r\n    // type:propTypes.string,\r\n    content:propTypes.string.isRequired,\r\n    index:propTypes.number,\r\n    delItem:propTypes.func\r\n}\r\n\r\n// 不通过prop父组件传值，默认定义好值\r\nMenuList.defaultProps={\r\n    type:'本帮菜'\r\n}\r\n\r\nexport default MenuList;","import React, { Component } from 'react';\r\nclass Css3 extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { // 初始化数据\r\n            isShow:true,\r\n        }\r\n        this.toToggle = this.toToggle.bind(this)\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p className={this.state.isShow ? 'show-text' : 'hide-text'} >用CSS3实现React动画</p>\r\n                <button onClick={this.toToggle}>切换上方文字</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // CSS3文字样式切换\r\n    toToggle() {\r\n        // 为了此处的this指向正确，设置点击事件的时候需要绑定this\r\n        this.setState({\r\n            // isShow : !isShow\r\n            isShow : this.state.isShow?false:true\r\n        })\r\n    }\r\n}\r\n\r\nexport default Css3;","import React, { Component } from 'react'\r\nimport MenuList from './MenuList'\r\nimport Css3 from './Css3'\r\nimport './style.css'\r\nimport axios from 'axios'\r\n\r\nclass Menu extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { // 初始化数据\r\n            inputValue: '',\r\n            list: ['糖醋里脊', '红烧带鱼'],\r\n            isShow: false\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            // 注释\r\n            <div>\r\n                <div className='box'>\r\n                    <div className='title'>\r\n                        React Demo (2020-12-03 周四)\r\n                    </div>\r\n                    <div className='section-box'>\r\n                        <div className='form-row'>\r\n                            <label htmlFor=\"ipt\">菜名：</label>\r\n                            {/* value={this.state.inputValue} */}\r\n                            <input\r\n                                id=\"ipt\"\r\n                                className='ipt'\r\n                                onChange={this.inputChange.bind(this)}\r\n                                value={this.state.inputValue}\r\n                            ></input>\r\n                        </div>\r\n                        <br></br>\r\n                        <div>\r\n                            <button onClick={this.addList.bind(this)} className='add'>add</button>\r\n                        (点击add新增元素)\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <div className='section-box'>\r\n                        <p>笔记：</p>\r\n                        <p>1.this.props可以接收所有属性和方法。</p>\r\n                    </div>\r\n\r\n                    <ol className='list section-box' ref={ul => this.ulBox = ul}>\r\n                        {\r\n                            this.state.list.map((item, index) => {\r\n                                // type='江浙菜'\r\n                                // dangerouslySetInnerHTML={{__html:item}} 加在li标签里 可以解析输入的代码\r\n                                return (\r\n                                    <MenuList\r\n\r\n                                        key={index + item}\r\n                                        index={index}\r\n                                        content={item}\r\n                                        delItem={this.delItem.bind(this)}\r\n                                    ></MenuList>\r\n                                    // <li\r\n                                    //     key={index + item}\r\n                                    // >\r\n                                    //     {item}\r\n                                    //     <button onClick={this.delItem.bind(this, index)}>删除</button>\r\n                                    // </li>\r\n                                )\r\n                            })\r\n                        }\r\n                    </ol>\r\n\r\n                    <div className='section-box'>\r\n                        <Css3></Css3>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('process.env',process.env)\r\n        axios.get('https://www.easy-mock.com/mock/5fc887be584b91646b4cf852/example/menu/list')\r\n            .then((res) => {\r\n                // console.log('axios 获取数据成功:' + JSON.stringify(res))\r\n                this.setState({\r\n                    list: res.data.data\r\n                })\r\n            })\r\n            .catch((error) => { \r\n                // console.log('axios 获取数据失败' + error)\r\n             })\r\n    }\r\n\r\n    // 双向绑定输入框\r\n    inputChange(e) {\r\n        // this.state.inputValue = e.target.value;\r\n        // console.log('标识符 数据 this.iptValue.value',this.iptValue.value)\r\n        this.setState({\r\n            inputValue: e.target.value\r\n            // inputValue:this.iptValue.value // 测试ref标识符\r\n        })\r\n    }\r\n    // 增加列表\r\n    addList() {\r\n        let value = this.state.inputValue\r\n        if (value) {\r\n            this.setState({\r\n                list: [...this.state.list, this.state.inputValue],\r\n                inputValue: ''\r\n            }, () => {\r\n                // this.iptValue.value = ''\r\n                // console.log('list length is ---------',this.ulBox.querySelectorAll('li').length) //异步加载测试\r\n            })\r\n        } else {\r\n            console.log('添加空')\r\n            return false\r\n        }\r\n\r\n\r\n    }\r\n\r\n    // 删除列表\r\n    delItem(index) {\r\n        // console.log('this---01',this)\r\n        var temp = this.state.list\r\n        temp.splice(index, 1)\r\n        this.setState({\r\n            list: temp\r\n        })\r\n        console.log('index---02', index)\r\n    }\r\n}\r\n\r\nexport default Menu","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport Menu from './Menu';\nimport reportWebVitals from './reportWebVitals';\n\n//JSX 是js和xml的结合，<>的地方当做html来运行，{}的地方当做js \nReactDOM.render(\n  <React.StrictMode>\n    {/* <App /> */\n      <Menu></Menu>\n    }\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}